//Этот код реализует простую очередь с 
//методами enqueue для добавления элемента в 
//конец очереди, dequeue для удаления элемента из
//начала очереди, peek для просмотра элемента в 
//начале очереди и display для отображения содержимого очереди
public class Queue<T> {
    private Node<T> front;
    private Node<T> rear;
    
    private static class Node<T> {
        private T data;
        private Node<T> next;

        public Node(T data) {
            this.data = data;
            this.next = null;
        }
    }

    public Queue() {
        this.front = null;
        this.rear = null;
    }

    public boolean isEmpty() {
        return front == null;
    }

    public void enqueue(T data) {
        Node<T> newNode = new Node<>(data);

        if (isEmpty()) {
            front = rear = newNode;
        } else {
            rear.next = newNode;
            rear = newNode;
        }
    }

    public T dequeue() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }

        T data = front.data;
        front = front.next;

        if (front == null) {
            rear = null;
        }

        return data;
    }

    public T peek() {
        if (isEmpty()) {
            throw new IllegalStateException("Queue is empty");
        }

        return front.data;
    }

    public void display() {
        Node<T> current = front;

        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }

        System.out.println();
    }

    public static void main(String[] args) {
        Queue<Integer> queue = new Queue<>();

        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);

        System.out.println("Queue elements:");
        queue.display();

        System.out.println("Dequeued element: " + queue.dequeue());

        System.out.println("Queue after dequeue:");
        queue.display();

        System.out.println("Peek element: " + queue.peek());
    }
}
